@import 'susy';
@import 'map-to-vars';

$container-size: $current-columns * $column-width;
$wrapper-width: $container-size + 20px;

$susy: (
  math: fluid,
  container: $container-size,
  columns: $current-columns,
  gutters: $gutter / $column-width,
  column-width: $column-width,
  gutter-position: split,
  global-box-sizing: border-box
);

.wrapper_#{$columns-large} {
  max-width: $wrapper-width;
}

.container_#{$columns-large} {
  @include container;

  &.breakout-container {
    max-width: 100%;

    .grid-zone.grid_#{$columns-large} {
      margin-left: calc((100% - #{$container-size}) / 2);
      margin-right: calc((100% - #{$container-size}) / 2);
      width: $container-size;

      &.breakout-zone {
        padding-left: calc((100% - #{$container-size}) / 2);
        padding-right: calc((100% - #{$container-size}) / 2);
        width: 100%;
      }
    }
  }
}

@each $zone-index in $grid-zones {
  .grid-zone.grid_#{$zone-index} {
    @if $zone-index < $current-columns {
      @include span($zone-index of $current-columns nest);

      @for $blok-index from 1 through $current-columns {
        @if $blok-index < $zone-index  {
          .grid-blok.grid_#{$blok-index} {
            @include span($blok-index of $zone-index);

            > .grid-element {
              @include span($blok-index of $blok-index $outer-padding);
            }
          }
        }
      }
    }
  }

  @if $zone-index >= $current-columns {
    .grid-zone.grid_#{$zone-index} {
      @include span($current-columns of $current-columns nest);

      @for $blok-index from 1 through $current-columns {
        .grid-blok.grid_#{$blok-index} {
          @include span($blok-index of $current-columns);

          > .grid-element {
            @include span($blok-index of $blok-index $outer-padding);
          }
        }
      }
    }
  }
}
